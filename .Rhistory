# Load custom functions (boring stuff)
source(file.path('helpers.R'))
data_file='./data/enron-event-history-all.csv'
data <- read.csv(data_file, header=FALSE, stringsAsFactors=FALSE,
na.strings='')
colnames(data) <- c('time', 'email_id', 'sender', 'recipients', 'topic', 'mode')
data <- remove_constants(data)
# Remove entries with NAs (70 entries)
data <- na.omit(data)
# Convert time to human readable datetime format, remove old time column
data$timestamp <- as.POSIXct(data$time/1000, origin='1970-01-01')
data$time <- NULL
#### Question 1: Sent and Received Frequency ####
# Returns a data frame containing the number of e-mails each entity sent and
# received in the data set.
# Aggregate sender frequencies
sender_freq <- data %>%
filter(!duplicated(email_id)) %>%
count(email_id, sender)  %>%
count(sender)
colnames(sender_freq) <- c('person', 'emails_sent')
# Aggregate recipient frequencies: First, create vector of number of
# recipients per e-mail
qty_recipients <- str_count(data$recipients, '\\|') + 1
max_recipients <- max(qty_recipients)  # 26
# Use tidyr:separate to split recipients into 26 columns
data <- data %>%
separate(recipients, paste('recipient', 1:max_recipients, sep='_'),
'\\|', extra='merge', fill='right')
# Uses gather() to convert wide data (recipients) to long data: 203k unique
# email_id, almost 500k total rows arrange(timespan) orders dataframe by time
data <- data %>%
gather(recipient_order, recipient, -c(timestamp, email_id, sender)) %>%
na.omit() %>%
arrange(timestamp)
# Finally, count recieved
recipient_freq <- data %>%
count(email_id, recipient) %>%
count(recipient)
colnames(recipient_freq) <-c('person', 'emails_received')
# Merge sender_freq and recipient_freq, convert NAs to zeros, sort descending by
# e-mails sent: dplyr:inner_join
email_freq <- inner_join(sender_freq, recipient_freq) %>% arrange(-emails_sent)
# Save result to the 'answers' directory
q1_filepath <- file.path('answers', 'q1.csv')
write.csv(email_freq, q1_filepath, row.names=FALSE)
# Output results
print_answer(email_freq, q1_filepath)
# Clean workspace: Remove intermediary datasets
rm(recipient_freq, sender_freq)
libs <- c('ggplot2', 'ggthemes', 'scales', 'lubridate', 'tidyr', 'stringr')
libs_need <- libs[!libs %in% installed.packages()[,"Package"]]
if (length(libs_need) > 0) { install.packages(libs_need, dependencies=TRUE) }
lapply(libs, require, character.only=TRUE)
# Remove entries with NAs (70 entries)
data <- na.omit(data)
# Convert time to human readable datetime format, remove old time column
data$timestamp <- as.POSIXct(data$time/1000, origin='1970-01-01')
data$time <- NULL
#### Question 1: Sent and Received Frequency ####
# Returns a data frame containing the number of e-mails each entity sent and
# received in the data set.
# Aggregate sender frequencies
sender_freq <- data %>%
filter(!duplicated(email_id)) %>%
count(email_id, sender)  %>%
count(sender)
colnames(sender_freq) <- c('person', 'emails_sent')
# Aggregate recipient frequencies: First, create vector of number of
# recipients per e-mail
qty_recipients <- str_count(data$recipients, '\\|') + 1
max_recipients <- max(qty_recipients)  # 26
# Use tidyr:separate to split recipients into 26 columns
data <- data %>%
separate(recipients, paste('recipient', 1:max_recipients, sep='_'),
'\\|', extra='merge', fill='right')
# Uses gather() to convert wide data (recipients) to long data: 203k unique
# email_id, almost 500k total rows arrange(timespan) orders dataframe by time
data <- data %>%
gather(recipient_order, recipient, -c(timestamp, email_id, sender)) %>%
na.omit() %>%
arrange(timestamp)
# Finally, count recieved
recipient_freq <- data %>%
count(email_id, recipient) %>%
count(recipient)
colnames(recipient_freq) <-c('person', 'emails_received')
# Merge sender_freq and recipient_freq, convert NAs to zeros, sort descending by
# e-mails sent: dplyr:inner_join
email_freq <- inner_join(sender_freq, recipient_freq) %>% arrange(-emails_sent)
# Save result to the 'answers' directory
q1_filepath <- file.path('answers', 'q1.csv')
write.csv(email_freq, q1_filepath, row.names=FALSE)
# Output results
print_answer(email_freq, q1_filepath)
# Clean workspace: Remove intermediary datasets
rm(recipient_freq, sender_freq)
data <- read.csv(data_file, header=FALSE, stringsAsFactors=FALSE,
na.strings='')
colnames(data) <- c('time', 'email_id', 'sender', 'recipients', 'topic', 'mode')
data <- remove_constants(data)
# Remove entries with NAs (70 entries)
data <- na.omit(data)
# Convert time to human readable datetime format, remove old time column
data$timestamp <- as.POSIXct(data$time/1000, origin='1970-01-01')
data$time <- NULL
sender_freq <- data %>%
filter(!duplicated(email_id)) %>%
count(email_id, sender)  %>%
count(sender)
View(data)
sender_freq <- data %>%
filter(!duplicated(email_id)) %>%
count(email_id, sender)  %>%
count(sender)
# Load dataset specified by user parameters
data <- read.csv(data_file, header=FALSE, stringsAsFactors=FALSE,
na.strings='')
# Add column names, remove worthless columns
colnames(data) <- c('time', 'email_id', 'sender', 'recipients', 'topic', 'mode')
data <- remove_constants(data)
# Remove entries with NAs (70 entries)
data <- na.omit(data)
# Convert time to human readable datetime format, remove old time column
data$timestamp <- as.POSIXct(data$time/1000, origin='1970-01-01')
data$time <- NULL
View(data)
head(data$email_id)
library(tidyr)
sender_freq <- data %>%
filter(!duplicated(email_id)) %>%
count(email_id, sender)  %>%
count(sender)
View(data)
data_file <- './data/enron-event-history-all.csv'
libs <- c('ggplot2', 'ggthemes', 'scales', 'lubridate', 'tidyr', 'stringr')
libs_need <- libs[!libs %in% installed.packages()[,"Package"]]
if (length(libs_need) > 0) { install.packages(libs_need, dependencies=TRUE) }
lapply(libs, require, character.only=TRUE)
library(ggplot2)
library(ggthemes)
library(scales)
library(lubridate)
library(tidry)
library(tidyr)
library(stringr)
source(file.path('helpers.R'))
data <- read.csv(data_file, header=FALSE, stringsAsFactors=FALSE,
na.strings='')
colnames(data) <- c('time', 'email_id', 'sender', 'recipients', 'topic', 'mode')
data <- remove_constants(data)
data <- na.omit(data)
data$timestamp <- as.POSIXct(data$time/1000, origin='1970-01-01')
data$time <- NULL
sender_freq <- data %>%
filter(!duplicated(email_id)) %>%
count(email_id, sender)  %>%
count(sender)
sender_freq <- data %>%
filter(!duplicated(email_id))
head(data$email_id)
getwd()
data_file
data_file <- "./data/enron-event-history-all.csv"
libs <- c('lubridate', 'tidyr', 'stringr')
libs_need <- libs[!libs %in% installed.packages()[,"Package"]]
if (length(libs_need) > 0) { install.packages(libs_need, dependencies=TRUE) }
lapply(libs, require, character.only=TRUE)
source(file.path('helpers.R'))
answers_dir <- file.path('answers')
if (!file.exists(answers_dir)) {
dir.create(file.path('answers'))
}
data <- read.csv(data_file, header=FALSE, stringsAsFactors=FALSE,
na.strings='')
colnames(data) <- c('time', 'email_id', 'sender', 'recipients', 'topic', 'mode')
data <- remove_constants(data)
data <- na.omit(data)
# Convert time to human readable datetime format, remove old time column
data$timestamp <- as.POSIXct(data$time/1000, origin='1970-01-01')
data$time <- NULL
sender_freq <- data %>%
filter(!duplicated(email_id)) %>%
count(email_id, sender) %>%
count(sender)
colnames(sender_freq) <- c('person', 'emails_sent')
sender_freq <- data %>%
filter(!duplicated(email_id))
data <- read.csv(data_file, header=FALSE, stringsAsFactors=FALSE,
na.strings='')
colnames(data) <- c('time', 'email_id', 'sender', 'recipients', 'topic', 'mode')
data <- remove_constants(data)
data <- na.omit(data)
data$timestamp <- as.POSIXct(data$time/1000, origin='1970-01-01')
data$time <- NULL
sender_freq <- data %>%
filter(!duplicated(email_id))
View(data)
length(unique(data$email_id))
sender_freq <- data %>%
filter(!duplicated(email_id))
colnames(data)
sender_freq <- data
sender_freq <- data %>%
filter(!duplicated(email_id))
class(data$email_id)
duplicated
head(data$email_id)
sender_freq <- data %>%
filter(!duplicated(data$email_id))
sender_freq <- data %>%
filter(!duplicated(data$email_id)) %>%
count(email_id, sender)
library(tidyr)
sender_freq <- data %>%
filter(!duplicated(data$email_id)) %>%
count(email_id, sender)
sender_freq <- data %>%
filter(!duplicated(data$email_id)) %>%
count(email_id, sender) %>%
count(sender)
colnames(sender_freq) <- c('person', 'emails_sent')
View(sender_freq)
data <- read.csv(data_file, header=FALSE, stringsAsFactors=FALSE,
na.strings='')
colnames(data) <- c('time', 'email_id', 'sender', 'recipients', 'topic', 'mode')
data <- remove_constants(data)
View(data)
data <- na.omit(data)
data$timestamp <- as.POSIXct(data$time/1000, origin='1970-01-01')
data$time <- NULL
View(data)
sender_freq <- data %>%
filter(!duplicated(data$email_id)) %>%
count(email_id, sender) %>%
count(sender)
colnames(sender_freq) <- c('person', 'emails_sent')
sender_freq <- data %>%
filter(!duplicated(data$email_id)) %>%
count(email_id, sender) %>%
count(sender) %>%
as.data.frame
sender_freq <- data %>%
filter(!duplicated(data$email_id)) %>%
count(email_id, sender) %>%
count(sender) %>%
data.frame
